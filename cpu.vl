//
// 16-Bit MIPS Single-Cycle Implementation
//

// Register File
module reg_file (rr1,rr2,wr,wd,regwrite,rd1,rd2,clock);
   input  [1:0] rr1,rr2,wr;
   input  [15:0] wd;
   input  regwrite,clock;
   wire   [15:0] q1,q2,q3;
   output [15:0] rd1,rd2;
   // registers
   D_flip_flop r100 (wd[0],c1,c2,c3,q1[0],q2[0],q3[0]);
   D_flip_flop r101 (wd[1],c1,c2,c3,q1[1],q2[1],q3[1]);
   D_flip_flop r102 (wd[2],c1,c2,c3,q1[2],q2[2],q3[2]);
   D_flip_flop r103 (wd[3],c1,c2,c3,q1[3],q2[3],q3[3]);
   D_flip_flop r104 (wd[4],c1,c2,c3,q1[4],q2[4],q3[4]);
   D_flip_flop r105 (wd[5],c1,c2,c3,q1[5],q2[5],q3[5]);
   D_flip_flop r106 (wd[6],c1,c2,c3,q1[6],q2[6],q3[6]);
   D_flip_flop r107 (wd[7],c1,c2,c3,q1[7],q2[7],q3[7]);
   D_flip_flop r108 (wd[8],c1,c2,c3,q1[8],q2[8],q3[8]);
   D_flip_flop r109 (wd[9],c1,c2,c3,q1[9],q2[9],q3[9]);
   D_flip_flop r110 (wd[10],c1,c2,c3,q1[10],q2[10],q3[10]);
   D_flip_flop r111 (wd[11],c1,c2,c3,q1[11],q2[11],q3[11]);
   D_flip_flop r112 (wd[12],c1,c2,c3,q1[12],q2[12],q3[12]);
   D_flip_flop r113 (wd[13],c1,c2,c3,q1[13],q2[13],q3[13]);
   D_flip_flop r114 (wd[14],c1,c2,c3,q1[14],q2[14],q3[14]);
   D_flip_flop r115 (wd[15],c1,c2,c3,q1[15],q2[15],q3[15]);
   // output port
   mux4x1_r mux100 (0,q1[0],q2[0],q3[0],rr1,rr2,rd1[0],rd2[0]),
            mux101 (0,q1[1],q2[1],q3[1],rr1,rr2,rd1[1],rd2[1]),
            mux102 (0,q1[2],q2[2],q3[2],rr1,rr2,rd1[2],rd2[2]),
            mux103 (0,q1[3],q2[3],q3[3],rr1,rr2,rd1[3],rd2[3]),
            mux104 (0,q1[4],q2[4],q3[4],rr1,rr2,rd1[4],rd2[4]),
            mux105 (0,q1[5],q2[5],q3[5],rr1,rr2,rd1[5],rd2[5]),
            mux106 (0,q1[6],q2[6],q3[6],rr1,rr2,rd1[6],rd2[6]),
            mux107 (0,q1[7],q2[7],q3[7],rr1,rr2,rd1[7],rd2[7]),
            mux108 (0,q1[8],q2[8],q3[8],rr1,rr2,rd1[8],rd2[8]),
            mux109 (0,q1[9],q2[9],q3[9],rr1,rr2,rd1[9],rd2[9]),
            mux110 (0,q1[10],q2[10],q3[10],rr1,rr2,rd1[10],rd2[10]),
            mux111 (0,q1[11],q2[11],q3[11],rr1,rr2,rd1[11],rd2[11]),
            mux112 (0,q1[12],q2[12],q3[12],rr1,rr2,rd1[12],rd2[12]),
            mux113 (0,q1[13],q2[13],q3[13],rr1,rr2,rd1[13],rd2[13]),
            mux114 (0,q1[14],q2[14],q3[14],rr1,rr2,rd1[14],rd2[14]),
            mux115 (0,q1[15],q2[15],q3[15],rr1,rr2,rd1[15],rd2[15]);
   // input port
   decoder dec(wr[1],wr[0],w3,w2,w1,w0);
   and a (regwrite_and_clock,regwrite,clock);
   and a1 (c1,regwrite_and_clock,w1),
       a2 (c2,regwrite_and_clock,w2),
       a3 (c3,regwrite_and_clock,w3);
endmodule

// Components
module D_flip_flop(D,CLK1,CLK2,CLK3,Q1,Q2,Q3);
   input  D,CLK1,CLK2,CLK3; 
   output Q1,Q2,Q3; 
   wire   CLK1N,CLK2N,CLK3N,X,Y,Z;
   not    not1 (CLK1N,CLK1),
          not2 (CLK2N,CLK2),
          not3 (CLK3N,CLK3);
   D_latch D1(D,CLK1,X),
           D2(X,CLK1N,Q1);
   D_latch D3(D,CLK2,Y),
           D4(Y,CLK2N,Q2);
   D_latch D5(D,CLK3,Z),
           D6(Z,CLK3N,Q3);
endmodule 

// D-Latch
module D_latch(D,C,Q);
   input  D,C; 
   output Q;
   wire   x,y,D1,Q1; 
   nand nand1 (x,D,C), 
        nand2 (y,D1,C), 
        nand3 (Q,x,Q1),
        nand4 (Q1,y,Q); 
   not  not1  (D1,D);
endmodule 

// 4x1 Multiplexer (16-Bit implementation)
module mux4x1_r (i0,i1,i2,i3,select,select2,x,y);
   input  i0,i1,i2,i3;
   input  [1:0] select,select2;
   output x,y;
   wire   w1,w2,w3,w4,w5,w6;
   wire   w12,w22,w32,w42,w52,w62;
   not  g1 (w1,select[1]),
        g2 (w2,select[0]);
   and  g3 (w3,i0,w2,w1),
        g4 (w4,i1,w1,select[0]),
        g5 (w5,i2,select[1],w2),
        g6 (w6,i3,select[1],select[0]);
   or   g7 (x, w3, w4, w5, w6);
   not  g12 (w12, select2[1]),
        g22 (w22, select2[0]);
   and  g32 (w32, i0, w22, w12),
        g42 (w42, i1, w12, select2[0]),
        g52 (w52, i2, select2[1], w22),
        g62 (w62, i3, select2[1], select2[0]);
   or   g7 (y, w32, w42, w52, w62);
endmodule

// Decoder
module decoder (S1,S0,D3,D2,D1,D0); 
   input  S0,S1; 
   output D0,D1,D2,D3; 
   not n1 (notS0,S0),
       n2 (notS1,S1);
   and a0 (D0,notS1,notS0), 
       a1 (D1,notS1,S0), 
       a2 (D2,S1,notS0), 
       a3 (D3,S1,S0); 
endmodule 

////////////////////////////////////////////////////////////////////////////////

// 16-Bit ALU
module alu (op,a,b,result,zero);
   input  [15:0] a;
   input  [15:0] b;
   input  [2:0] op;
   output [15:0] result;
   output zero;
   wire   c1,c2,c3,c4,r;
   
   ALU1   alu0  (a[0],b[0],  op[2],op[1:0],set,op[2],c1,result[0]);
   ALU1   alu1  (a[1],b[1],  op[2],op[1:0],0,  c1,   c2,result[1]);
   ALU1   alu2  (a[2],b[2],  op[2],op[1:0],0,  c2,   c3,result[2]);
   ALU1   alu3  (a[3],b[3],  op[2],op[1:0],0,  c3,   c4,result[3]);
   ALU1   alu4  (a[4],b[4],  op[2],op[1:0],0,  c4,   c5,result[4]);
   ALU1   alu5  (a[5],b[5],  op[2],op[1:0],0,  c5,   c6,result[5]);
   ALU1   alu6  (a[6],b[6],  op[2],op[1:0],0,  c6,   c7,result[6]);
   ALU1   alu7  (a[7],b[7],  op[2],op[1:0],0,  c7,   c8,result[7]);
   ALU1   alu8  (a[8],b[8],  op[2],op[1:0],0,  c8,   c9,result[8]);
   ALU1   alu9  (a[9],b[9],  op[2],op[1:0],0,  c9,   c10,result[9]);
   ALU1   alu10 (a[10],b[10],op[2],op[1:0],0,  c10,  c11,result[10]);
   ALU1   alu11 (a[11],b[11],op[2],op[1:0],0,  c11,  c12,result[11]);
   ALU1   alu12 (a[12],b[12],op[2],op[1:0],0,  c12,  c13,result[12]);
   ALU1   alu13 (a[13],b[13],op[2],op[1:0],0,  c13,  c14,result[13]);
   ALU1   alu14 (a[14],b[14],op[2],op[1:0],0,  c14,  c15,result[14]);
   ALUmsb alu15 (a[15],b[15],op[2],op[1:0],0,  c15,  c16,result[15],set);

   or   or1(r,result[0],result[1],result[2],result[3],result[4],result[5],result[6],result[7],
            result[8],result[9],result[10], result[11],result[12], result[13], result[14],result[15]);
   not  not1(zero, r);
endmodule

// 1-Bit ALU
module ALU1 (a,b,binvert,op,less,carryin,carryout,result);
   input  a,b,less,carryin,binvert;
   input  [1:0] op;
   output carryout,result;
   wire   sum,a_and_b,a_or_b,b_inv;
   not    not1 (b_inv,b);
   mux2x1 mux1 (b,b_inv,binvert,b1);
   and    and1 (a_and_b,a,b);
   or     or1 (a_or_b,a,b);
   fulladder adder1 (sum,carryout,a,b1,carryin);
   mux4x1 mux2 (a_and_b,a_or_b,sum,less,op[1:0],result); 
endmodule

// 1-Bit ALU (for most significant bit)
module ALUmsb (a,b,binvert,op,less,carryin,carryout,result,sum);
   input  a,b,less,carryin,binvert;
   input  [1:0] op;
   output carryout,result,sum;
   wire   sum,a_and_b,a_or_b,b_inv;
   not    not1 (b_inv, b);
   mux2x1 mux1 (b,b_inv,binvert,b1);
   and    and1 (a_and_b, a, b);
   or     or1 (a_or_b, a, b);
   fulladder adder1 (sum,carryout,a,b1,carryin);
   mux4x1 mux2 (a_and_b,a_or_b,sum,less,op[1:0],result); 
endmodule

// Half-Adder
module halfadder (S,C,x,y); 
   input  x,y; 
   output S,C; 
   xor    (S,x,y); 
   and    (C,x,y); 
endmodule 

// Full-Adder
module fulladder (S,C,x,y,z); 
   input  x,y,z; 
   output S,C; 
   wire   S1,D1,D2;
   halfadder HA1 (S1,D1,x,y), 
             HA2 (S,D2,S1,z); 
   or  g1(C,D2,D1); 
endmodule 

// 2x1 Multiplexer
module mux2x1(x,y,c,S);
    output S;
    input  x,y,c;
    wire   w1,w2,w3;
    not g1 (w1,c);
    and g2 (w2,y,c),
        g3(w3,x,w1);
    or  g4(S,w2,w3);
endmodule

// 4x1 Multiplexer
module mux4x1(a,b,c,d,Op,Result);
    input  [1:0] Op;
    input  a, b, c, d;
    output Result;
    wire   w1,w2,w3,w4,w5,w6,Result;
    not g1 (w5,Op[0]),
        g2 (w6,Op[1]);
    and g3 (w1,a,w6,w5),
        g4 (w2,b,w6,Op[0]),
        g5 (w3,c,Op[1],w5),
        g6 (w4,d,Op[1],Op[0]);
    or  g7 (Result,w1,w2,w3,w4);
endmodule

////////////////////////////////////////////////////////////////////////////////


// Updated and changed for 16-Bit // Test BNE instruction //
//
// Changed the Control output to 10 bits to fit the 3-bit ALUOp at the end
//
// Main Control
module MainControl (Op, Control); 

  input  [3:0] Op;
  output reg [9:0] Control;

  always @(Op) case (Op)
    4'b0000: Control <= 10'b1001000010; // ADD
    4'b0001: Control <= 10'b1001000110; // SUB
    4'b0010: Control <= 10'b1001000000; // AND
    4'b0011: Control <= 10'b1001000001; // OR
    4'b0111: Control <= 10'b1001000111; // SLT
    4'b0100: Control <= 10'b0101000010; // ADDI
    4'b0101: Control <= 10'b0111000010; // LW
    4'b0110: Control <= 10'b0100100010; // SW
    4'b1000: Control <= 10'b0000010110; // BEQ  // changed last three bits (ALUOp) from 010 to 110
    4'b1001: Control <= 10'b0000001110; // BNE  // changed last three bits (ALUOp) from 010 to 110
						// now matches ALUControl from mips-simple template
  endcase
  
endmodule

// 2x1 Multiplexer
module mux2x1_2(A,B,Select,Out);
  input A,B,Select;
  output Out;
  wire x,y,z,i;
  not g1 (i,Select);
  and g2 (x,A,i),
      g3 (y,B,Select),
      g4 (z,A,B);
  or  g5 (Out,x,y,z);
endmodule


// 16-Bit CPU
module CPU (clock,WD,IR);

  input clock;
  output [15:0] WD,IR;
  reg[15:0] PC,IMemory[0:1023],DMemory[0:1023];
  wire [15:0] IR,SignExtend,NextPC,RD2,A,B,ALUOut,PCplus4,Target;
  wire [1:0] WR;
  wire [2:0] ALUOp;

  initial begin
    
    // 16-Bit Instructions
    // Program: swap memory cells and compute absolute value
    IMemory[0] = 16'b0101000100000000; // lw  $1, 0($0)
    IMemory[1] = 16'b0101001000000010; // lw  $2, 2($0)
    IMemory[2] = 16'b0111011011000000; // slt $3, $1, $2
    IMemory[3] = 16'b1000110000000100; // beq $3, $0, 4
    //IMemory[3] = 16'b1001110000000100; // bne $3, $0, 4
    IMemory[4] = 16'b0110000100000010; // sw  $1, 2($0)
    IMemory[5] = 16'b0110001000000000; // sw  $2, 0($0)
    IMemory[6] = 16'b0101000100000000; // lw  $1, 0($0)
    IMemory[7] = 16'b0101001000000010; // lw  $2, 2($0)
    IMemory[8] = 16'b0001011001000000; // sub $1, $1, $2  

    // 16-Bit Data Memory
    // switch the cells and see how the simulation output changes
    DMemory [0] = 16'b0000000000000111; // 7
    DMemory [1] = 16'b0000000000000101; // 5
    
  end

  initial PC = 0;

  assign IR = IMemory[PC>>1];
  assign SignExtend = {{8{IR[7]}},IR[7:0]}; // sign extension
  
  reg_file rf (IR[11:10],IR[9:8],WR,WD,RegWrite,A,RD2,clock);
  alu fetch (3'b010,PC,2,PCplus4,Unused1);
  alu ex (ALUOp, A, B, ALUOut, Zero);
  alu branch (3'b010,SignExtend<<1,PCplus4,Target,Unused2);  //change SignExtend<<2 ?
  MainControl MainCtr (IR[15:12],{RegDst,ALUSrc,MemtoReg,RegWrite,MemWrite,Beq,Bne,ALUOp});
  
  
  //assign WR = (RegDst) ? IR[7:6]: IR[9:8];             // RegDst Mux
  mux2x1_2b RegDstMux(IR[9:8], IR[7:6], RegDst, WR);
  
  //assign WD = (MemtoReg) ? DMemory[ALUOut>>1]: ALUOut; // MemtoReg Mux //change [ALUOut>>2] ?
  mux2x1_16b MemtoRegMux(ALUOut, DMemory[ALUOut>>1], MemtoReg, WD);
  
  //assign B  = (ALUSrc) ? SignExtend: RD2;              // ALUSrc Mux 
  mux2x1_16b ALUSrcMux(RD2, SignExtend, ALUSrc, B);
  
  // Branch Logic Multiplexer
  mux2x1_2 br (Bne, Beq, Zero, BranchClt);
  
  //assign NextPC = (BranchClt) ? Target: PCplus4;  // Branch Mux
  mux2x1_16b BranchMux(PCplus4, Target, BranchClt, NextPC);
  
  
  always @(negedge clock) begin 
    PC <= NextPC;
    if (MemWrite) DMemory[ALUOut>>1] <= RD2; //change [ALUOut>>2] ?
  end
  
endmodule

// Test Module
module test ();

  reg clock;
  wire signed [15:0] WD;
  wire [15:0] IR;

  CPU test_cpu(clock,WD,IR);

  always #1 clock = ~clock;

  initial begin
    $display ("time clock IR       WD");
    $monitor ("%2d   %b     %b %d", $time,clock,IR,WD);
    clock = 1;
    #17 $finish;
  end
  
endmodule

/* Compiling and Simulation

// Ours will be different because we are reusing registers

C:\CS385\HDL>iverilog cpu.vl
C:\CS385\HDL>vvp a.out

time clock IR       WD
 0   0     8c080000 00000005
 1   1     8c090004 00000007
 2   0     8c090004 00000007
 3   1     0109502a 00000001
 4   0     0109502a 00000001
 5   1     11400002 00000001
 6   0     11400002 00000001
 7   1     ac080004 00000004
 8   0     ac080004 00000004
 9   1     ac090000 00000000
10   0     ac090000 00000000
11   1     8c0b0000 00000007
12   0     8c0b0000 00000007
13   1     8c0c0004 00000005
14   0     8c0c0004 00000005
15   1     016c5822 00000002
16   0     016c5822 00000002
17   1     xxxxxxxx 0000000X

*/

//2 2-Bit input to 1 2-bit output multiplexor
module mux2x1_2b(A,B,Select,Out);
  input [1:0] A,B;
  input Select;
  output[1:0] Out;
  
  mux2x1 m0(A[0], B[0], Select, Out[0]);
  mux2x1 m1(A[1], B[1], Select, Out[1]);

endmodule

//2 16-Bit input to 1 16-bit output multiplexor
module mux2x1_16b(A,B,Select,Out);
  input [15:0] A,B;
  input Select;
  output[15:0] Out;
  
  mux2x1 m0(A[0], B[0], Select, Out[0]);
  mux2x1 m1(A[1], B[1], Select, Out[1]);
  mux2x1 m2(A[2], B[2], Select, Out[2]);
  mux2x1 m3(A[3], B[3], Select, Out[3]);
  mux2x1 m4(A[4], B[4], Select, Out[4]);
  mux2x1 m5(A[5], B[5], Select, Out[5]);
  mux2x1 m6(A[6], B[6], Select, Out[6]);
  mux2x1 m7(A[7], B[7], Select, Out[7]);
  mux2x1 m8(A[8], B[8], Select, Out[8]);
  mux2x1 m9(A[9], B[9], Select, Out[9]);
  mux2x1 m10(A[10], B[10], Select, Out[10]);
  mux2x1 m11(A[11], B[11], Select, Out[11]);
  mux2x1 m12(A[12], B[12], Select, Out[12]);
  mux2x1 m13(A[13], B[13], Select, Out[13]);
  mux2x1 m14(A[14], B[14], Select, Out[14]);
  mux2x1 m15(A[15], B[15], Select, Out[15]);

endmodule
